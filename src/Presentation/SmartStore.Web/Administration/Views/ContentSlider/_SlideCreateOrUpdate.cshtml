@model SliderSlideModel

@using Telerik.Web.Mvc.UI;
@using SmartStore.Core.Domain.ContentSlider;
@using SmartStore.Admin.Models.ContentSlider;
@using System.Collections;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.SliderId)
@Html.SmartStore().TabStrip().Name("sliderslide-edit").Style(TabsStyle.Material).Items(x =>
{
    x.Add().Text(T("Admin.CMS.ContentSlider.Slide.Info").Text).Content(TabInfo()).Selected(true);

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "sliderslide-edit", this.Html, this.Model));
})
@helper TabInfo()
{
    if (Model.Id != 0)
    {
        <table class="adminContent">
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.Id)
                </td>
                <td class="adminData">
                    @Html.TextBoxFor(model => model.Id, new { @readonly = "readonly", @class = "form-control-plaintext" })
                    @Html.ValidationMessageFor(model => model.Id)
                </td>
            </tr>
        </table>
    }

    @(Html.LocalizedEditor<SliderSlideModel, SliderSlidLocalizedModel>("sliderslide-info-localized",
                                                            @<table class="adminContent">
                                                                <tr>
                                                                    <td class="adminTitle">
                                                                        @Html.SmartLabelFor(model => model.Locales[item].SlideTitle)
                                                                    </td>
                                                                    <td class="adminData">
                                                                        @*IMPORTANT: Do not delete, this hidden element contains the id to assign localized values to the corresponding language *@
                                                                        @Html.HiddenFor(model => model.Locales[item].LanguageId)

                                                                        @Html.EditorFor(model => Model.Locales[item].SlideTitle)
                                                                        @Html.ValidationMessageFor(model => model.Locales[item].SlideTitle)
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <td class="adminTitle">
                                                                        @Html.SmartLabelFor(model => model.Locales[item].SlideContent)
                                                                    </td>
                                                                    <td class="adminData">
                                                                        @Html.TextAreaFor(model => model.Locales[item].SlideContent)
                                                                        @Html.ValidationMessageFor(model => model.Locales[item].SlideContent)
                                                                    </td>
                                                                </tr>

                                                            </table>
,
                                                                                                                                    @<table class="adminContent">
                                                                                                                                        <tr>
                                                                                                                                            <td class="adminTitle">
                                                                                                                                                @Html.SmartLabelFor(model => model.SlideTitle)
                                                                                                                                            </td>
                                                                                                                                            <td class="adminData">
                                                                                                                                                @Html.EditorFor(model => model.SlideTitle)
                                                                                                                                                @Html.ValidationMessageFor(model => model.SlideTitle)
                                                                                                                                            </td>
                                                                                                                                        </tr>
                                                                                                                                        <tr>
                                                                                                                                            <td class="adminTitle">
                                                                                                                                                @Html.SmartLabelFor(model => model.SlideContent)
                                                                                                                                            </td>
                                                                                                                                            <td class="adminData">
                                                                                                                                                @Html.EditorFor(model => model.SlideContent)
                                                                                                                                                @Html.ValidationMessageFor(model => model.SlideContent)
                                                                                                                                            </td>
                                                                                                                                        </tr>
                                                                                                                                    </table>
            ))

    IList<SelectListItem> SlideTypeSelectedList = new List<SelectListItem>
{
        new SelectListItem {Text=T("Admin.CMS.ContentSlider.Slide.NormalSlide"),Value="0" },
        new SelectListItem {Text=T("Admin.CMS.ContentSlider.Slide.ProductSlide"),Value="1" },
        new SelectListItem {Text=T("Admin.CMS.ContentSlider.Slide.CategorySlide"),Value="2" },
        new SelectListItem {Text=T("Admin.CMS.ContentSlider.Slide.ManufacturerSlide"),Value="3" }
    };
<table class="adminContent" id="slidesTable">
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.IsActive)
        </td>
        <td class="adminData">
            @Html.EditorFor(x => x.IsActive)
            @Html.ValidationMessageFor(model => model.IsActive)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.PictureId)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.PictureId, new { transientUpload = true })
            @Html.ValidationMessageFor(model => model.PictureId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.DisplayOrder)
        </td>
        <td class="adminData">
            @Html.EditorFor(x => x.DisplayOrder)
            @Html.ValidationMessageFor(model => model.DisplayOrder)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.SlideType)
        </td>
        <td class="adminData">
            @Html.DropDownListFor(model => model.SlideType, SlideTypeSelectedList, T("Common.Unspecified"))
            @Html.ValidationMessageFor(model => model.SlideType)
        </td>
    </tr>
    <tr class="select-item-product">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.ItemId)
        </td>
        <td class="adminData">
            <div class="input-group">
                @Html.TextBoxFor(model => model.ItemId, new { @readonly = "readonly" })
                <span class="input-group-append">
                    <a class="btn btn-secondary" id="reset-required-productids" title="@T("Admin.Common.Reset")">
                        <i class="fa fa-times"></i>
                    </a>
                </span>
                <span class="input-group-append">
                    @(Html.SmartStore().EntityPicker()
                        .For(x => x.ItemId)
                        .AppendMode(false)
                        .MaxItems(1)
                        .EntityType("Product")
                        .DialogTitle(T("Admin.CMS.ContentSlider.Slide.SelectProduct").Text.EncodeJsString('\'', false))
                        .Caption(T("Admin.Common.Search").Text.EncodeJsString('\'', false)))
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.ItemId)
        </td>
    </tr>
    <tr class="select-item-category">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.ItemId)
        </td>
        <td class="adminData">
            <div class="input-group">
                @Html.TextBoxFor(model => model.ItemId, new { @readonly = "readonly", @id = "categoryItemId" })
                <span class="input-group-append">
                    <a class="btn btn-secondary" id="reset-required-productids" title="@T("Admin.Common.Reset")">
                        <i class="fa fa-times"></i>
                    </a>
                </span>
                <span class="input-group-append">
                    @(Html.SmartStore().EntityPicker()
                        .For(x => x.ItemId)
                        .AppendMode(false)
                        .MaxItems(1)
                        .EntityType("Category")
                        .DialogTitle(T("Admin.CMS.ContentSlider.Slide.SelectCategory").Text.EncodeJsString('\'', false))
                        .Caption(T("Admin.Common.Search").Text.EncodeJsString('\'', false))
                        .OnSelectionCompleted("PicCategory_Completed"))
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.ItemId)
        </td>
    </tr>
    <tr class="select-item-manufacturer">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.ItemId)
        </td>
        <td class="adminData">
            <div class="input-group">
                @Html.TextBoxFor(model => model.ItemId, new { @readonly = "readonly", @id = "manufactureItemId" })
                <span class="input-group-append">
                    <a class="btn btn-secondary" id="reset-required-productids" title="@T("Admin.Common.Reset")">
                        <i class="fa fa-times"></i>
                    </a>
                </span>
                <span class="input-group-append">
                    @(Html.SmartStore().EntityPicker()
                        .For(x => x.ItemId)
                        .AppendMode(false)
                        .MaxItems(1)
                        .EntityType("Manufacturer")
                        .DialogTitle(T("Admin.CMS.ContentSlider.Slide.SelectManufacturer").Text.EncodeJsString('\'', false))
                        .Caption(T("Admin.Common.Search").Text.EncodeJsString('\'', false))
                        .OnSelectionCompleted("PickManufacture_Completed"))
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.ItemId)
        </td>
    </tr>
    <tr class="displayproductprice">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.DisplayPrice)
        </td>
        <td class="adminData">
            @Html.EditorFor(x => x.DisplayPrice)
            @Html.ValidationMessageFor(model => model.DisplayPrice)
        </td>
    </tr>
    <tr class="showproductbutton">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.DisplayButton)
        </td>
        <td class="adminData">
            @Html.EditorFor(x => x.DisplayButton)
            @Html.ValidationMessageFor(model => model.DisplayButton)
        </td>
    </tr>
</table>
}

<script type="text/javascript">
$(document).ready(function () {

        $('#@(Html.FieldIdFor(x => x.SlideType))').change(function () {
        var type = $(this).val();
        if (type == '@((int)SlideType.NormalSlide)' || type == '') {
            $('#slidesTable').find('.select-item-product').hide(type);
            $('#slidesTable').find('.select-item-category').hide(type);
            $('#slidesTable').find('.select-item-manufacturer').hide(type);
            $('#slidesTable').find('.displayproductprice').hide(type);
            $('#slidesTable').find('.showproductbutton').hide(type);
        } else if (type == '@((int)SlideType.ProductSlide)') {
            $('#slidesTable').find('.select-item-category').hide(type);
            $('#slidesTable').find('.select-item-manufacturer').hide(type);
            $('#slidesTable').find('.select-item-product').show(type);
            $('#slidesTable').find('.displayproductprice').show(type);
            $('#slidesTable').find('.showproductbutton').show(type);
        } else if (type == '@((int)SlideType.CategorySlide)') {
            $('#slidesTable').find('.select-item-product').hide(type);
            $('#slidesTable').find('.select-item-manufacturer').hide(type);
            $('#slidesTable').find('.select-item-category').show(type);
            $('#slidesTable').find('.displayproductprice').hide(type);
            $('#slidesTable').find('.showproductbutton').hide(type);
        } else if (type == '@((int)SlideType.ManufacturerSlide)') {
            $('#slidesTable').find('.select-item-product').hide(type);
            $('#slidesTable').find('.select-item-category').hide(type);
            $('#slidesTable').find('.select-item-manufacturer').show(type);
            $('#slidesTable').find('.displayproductprice').hide(type);
            $('#slidesTable').find('.showproductbutton').hide(type);
        }}).trigger('change');
});

    function PickManufacture_Completed(ids) {
        $('#manufactureItemId').val(ids);
        return true;
    }

     function PicCategory_Completed(ids) {
        $('#categoryItemId').val(ids);
        return true;
	}
</script>
